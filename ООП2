class Vector {
private:
    double* arr; // Вказівник на масив дійсних чисел
    int size; // Розмір вектора

public:
    // Конструктор за замовчуванням
    Vector() : arr(nullptr), size(0) {}

    // Конструктор з параметрами
    Vector(int size) : size(size) {
        arr = new double[size];
        for (int i = 0; i < size; i++) {
            arr[i] = 0.0;
        }
    }

    // Деструктор
    ~Vector() {
        delete[] arr;
    }

    // Оператор приведення до типу int - повертає розмір вектора
    operator int() const {
        return size;
    }

    // Оператор встановлення нового розміру вектора (метод класу)
    void operator()(int newSize) {
        if (newSize < 0) {
            newSize = 0;
        }

        double* newArr = new double[newSize];
        int copySize = newSize < size ? newSize : size;
        for (int i = 0; i < copySize; i++) {
            newArr[i] = arr[i];
        }

        delete[] arr;
        arr = newArr;
        size = newSize;
    }

    // Оператор віднімання числа від вектора (метод класу)
    void operator-(double num) {
        for (int i = 0; i < size; i++) {
            arr[i] -= num;
        }
    }

    // Оператор доступу за індексом (метод класу)
    double& operator[](int index) {
        if (index < 0 || index >= size) {
            throw std::out_of_range("Index out of range");
        }
        return arr[index];
    }

    // Дружня функція для виводу вектора
    friend std::ostream& operator<<(std::ostream& os, const Vector& vec) {
        os << "[ ";
        for (int i = 0; i < vec.size; i++) {
            os << vec.arr[i] << " ";
        }
        os << "]";
        return os;
    }
};
